# Generated by Django 5.1.3 on 2025-02-06 05:35

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
        ('contact', '0001_initial'),
        ('membership', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LiveStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the live stream', max_length=200)),
                ('description', models.TextField(help_text='Description of the live stream')),
                ('stream_url', models.URLField(help_text='URL of the live stream')),
                ('scheduled_time', models.DateTimeField(help_text='Scheduled time for the live stream')),
                ('is_live', models.BooleanField(default=False, help_text='Indicates if the live stream is currently live')),
                ('thumbnail', models.ImageField(help_text='Thumbnail for the live stream', upload_to='livestreams/')),
                ('viewers_count', models.IntegerField(default=0, help_text='Current count of viewers for the live stream')),
                ('recorded_url', models.URLField(blank=True, help_text='Optional URL to the recorded version of the live stream', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the resource', max_length=255)),
                ('description', models.TextField(help_text='Description of the resource')),
                ('file', models.FileField(help_text='Upload the resource file', upload_to='resources/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Date and time the resource was uploaded')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('allowed_days', models.CharField(choices=[('Sunday', 'Sunday'), ('Tuesday', 'Tuesday'), ('Friday', 'Friday')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the schedule', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the schedule')),
                ('start_time', models.DateTimeField(help_text='Start time for the event on schedule')),
                ('end_time', models.DateTimeField(help_text='End time for the event on the schedule')),
                ('location', models.CharField(blank=True, help_text='Optional location for the event', max_length=200)),
                ('is_recurring', models.BooleanField(default=False, help_text='Indicates if the schedule is recurring')),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('YEARLY', 'Yearly')], help_text="E.g., 'Weekly', 'Monthly', 'Yearly' (if the schedule is recurring)", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SermonSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the sermon series', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='Auto-generated from title, used in URLs.', unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the sermon series')),
                ('image', models.ImageField(blank=True, help_text='Optional image for the series', null=True, upload_to='sermon_series/')),
                ('start_date', models.DateField(help_text='Start date of the sermon series')),
                ('end_date', models.DateField(blank=True, help_text='Optional end date of the sermon series', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SermonTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the tag', max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='Auto-generated from name, used in URLs.', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Sunday', 'Sunday'), ('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday')], help_text='Day of the week for this schedule', max_length=10)),
                ('time', models.TimeField(help_text='Time of the service or event')),
                ('service_type', models.CharField(help_text='Type of service/event (e.g., Worship, Bible Study)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description for the scheduled service/event', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrayerRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.TextField(help_text='Details of the prayer request')),
                ('date_requested', models.DateTimeField(auto_now_add=True, help_text='Date and time the prayer request was made')),
                ('is_answered', models.BooleanField(default=False, help_text='Indicates if the prayer request has been answered')),
                ('member', models.ForeignKey(blank=True, help_text='Member who requested prayer', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prayer_requests', to='membership.member')),
            ],
        ),
        migrations.CreateModel(
            name='Sermon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('title', models.CharField(help_text='Title of the sermon', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='Auto-generated from title, used in URLs.', unique=True)),
                ('description', models.TextField(blank=True, help_text='Description or summary of the sermon')),
                ('date', models.DateField(help_text='Date the sermon was preached')),
                ('scripture_reference', models.CharField(blank=True, help_text='Scripture passage reference for the sermon', max_length=200)),
                ('video_url', models.URLField(blank=True, help_text='Optional URL to a video recording of the sermon', null=True)),
                ('audio_file', models.FileField(blank=True, help_text='Optional audio file of the sermon', null=True, upload_to='sermons/audio/')),
                ('is_featured', models.BooleanField(default=False, help_text='Indicates if the sermon should be featured')),
                ('preacher', models.ForeignKey(blank=True, help_text='The staff member who preached the sermon', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contact.staff')),
                ('series', models.ManyToManyField(blank=True, help_text='The sermon series this sermon belongs to', related_name='sermons', to='worship.sermonseries')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags for this sermon', related_name='sermons', to='worship.sermontag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the service (e.g., Sunday Service)', max_length=255)),
                ('day_of_week', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)], help_text='0-6 starting with Sunday')),
                ('start_time', models.TimeField(help_text='Start time of the service')),
                ('end_time', models.TimeField(blank=True, help_text='Optional end time of the service', null=True)),
                ('location', models.CharField(blank=True, help_text='Optional location of the service', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the service', null=True)),
                ('church', models.ForeignKey(help_text='The church to which this service belongs', on_delete=django.db.models.deletion.CASCADE, related_name='services', to='account.church')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Sunday', 'Sunday'), ('Tuesday', 'Tuesday'), ('Friday', 'Friday')], max_length=10)),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Denied', 'Denied')], default='Pending', max_length=10)),
                ('reason', models.CharField(blank=True, choices=[('Health Issues', 'Health Issues'), ('Work Commitment', 'Work Commitment'), ('Family Emergency', 'Family Emergency'), ('Traveling', 'Traveling'), ('Other', 'Other')], help_text='Required if appointment is denied.', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lord_supper_helpers', models.ManyToManyField(blank=True, limit_choices_to={'gender': 'M'}, related_name='appointment_lord_supper_helpers', to='membership.member')),
                ('member', models.ForeignKey(limit_choices_to={'gender': 'male'}, on_delete=django.db.models.deletion.CASCADE, to='membership.member')),
                ('ushers', models.ManyToManyField(blank=True, limit_choices_to={'gender': 'M'}, related_name='appointment_ushers', to='membership.member')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='worship.role')),
            ],
            options={
                'unique_together': {('date', 'role', 'member')},
            },
        ),
    ]
